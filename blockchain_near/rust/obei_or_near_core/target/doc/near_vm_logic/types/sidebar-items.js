initSidebarItems({"enum":[["PromiseResult","When there is a callback attached to one or more contract calls the execution results of these calls are available to the contract invoked through the callback."],["ReturnData",""]],"type":[["AccountId","Account identifier. Provides access to userâ€™s state."],["Balance","Balance is type for storing amounts of tokens."],["BlockHeight","Height of the block."],["BlockHeightDelta","Block height delta that measures the difference between `BlockHeight`s."],["EpochHeight","Height of the epoch."],["GCCount",""],["Gas","Gas is a type for storing amount of gas."],["IteratorIndex",""],["MerkleHash","Hash used by a struct implementing the Merkle tree."],["Nonce","Nonce for transactions."],["NumBlocks","Number of blocks in current group."],["NumSeats","Number of seats of validators (block producer or hidden ones) in current group (settlement)."],["NumShards","Number of shards in current group."],["PromiseId",""],["PromiseIndex",""],["ProtocolVersion",""],["PublicKey",""],["ReceiptIndex",""],["ReceiptIndex",""],["ShardId","Shard index, from 0 to NUM_SHARDS - 1."],["StorageUsage","StorageUsage is used to count the amount of storage used by a contract."],["StorageUsageChange","StorageUsageChange is used to count the storage usage within a single contract call."],["ValidatorId","Validator identifier in current group."],["ValidatorMask","Mask which validators participated in multi sign."]]});